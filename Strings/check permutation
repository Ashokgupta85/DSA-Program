Problem Statement: Check Permutation
Problem Level: EASY
Problem Description:
Given two strings, S and T, check if they are permutations of each other. Return true or false.
Permutation means - length of both the strings should same and should contain same set of characters. Order of characters doesn't matter.
Note : Input strings contain only lowercase english alphabets.
<br>
Input format :
Line 1 : String 1
Line 2 : String 2

Output format :
'true' or 'false'

Constraints :
0 <= |S| <= 10^7
0 <= |T| <= 10^7
where |S| represents the length of string, S.

Sample Input 1 :
abcde
baedc

Sample Output 1 :
true

Sample Input 2 :
abc
cbd

Sample Output 2 :
false

//solution

import java.util.Scanner;
import java.util.*;
class Solution {
	
    
    public static boolean isPermutation(String str1, String str2) {
        //Your code goes here
        int n1 = str1.length();
        int n2 = str2.length();
        if (n1 != n2)
            return false;
        char ch1[] = str1.toCharArray();
        char ch2[] = str2.toCharArray();
        
        Arrays.sort(ch1);
        Arrays.sort(ch2);
        for (int i = 0; i < n1; i++)
            if (ch1[i] != ch2[i])
                return false;
        return true;
    }
    }
