Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]


Solution:

class Solution {
    public List<String> letterCombinations(String digits) {
      List<String>ans=new ArrayList<>();
      if(digits.length()==0){
          return ans;
      }
      String [] mapping={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
      combination(digits,0,new StringBuffer(),mapping,ans);

      return ans;
    }

    private void combination(String digits,int ind, StringBuffer sb,String []mapping,List<String>ans){
        if(ind>=digits.length()){
           ans.add(sb.toString());
           return;
        }
        int num=digits.charAt(ind)-'0';
        String st=mapping[num];
        for(int i=0;i<st.length();i++){
            sb.append(st.charAt(i));
            combination(digits,ind+1,sb,mapping,ans);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
