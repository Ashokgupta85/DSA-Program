Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16

//Solution:

class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        // int oddcount=0;
        // int ans=0;
        // int i=0;
        // int count=0;
        // for(int j=0;j<nums.length;j++){
        //     if(nums[j]%2==1){
        //         oddcount++;
        //         count=0;
        //     }
        //     while(oddcount==k){
        //         if(nums[i++]%2==1) oddcount--;
        //         count++;
        //     }
        //     ans+=count;
        // }
        // return ans;

         //Replace all odd by 1 and even by 0
        for(int i=0;i<nums.length;i++){
            nums[i] = (nums[i] %2 == 0) ? 0 : 1;
        }
        
        //problem becomes number of subarrays with sum = k
        HashMap<Integer,Integer> map = new HashMap<>();
        int res = 0;
        int sum = 0;//cumulative sum
        map.put(0,1);
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
            if(map.containsKey(sum - k)){
                res+=map.get(sum - k);
            }
            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        return res;
    }
    }
