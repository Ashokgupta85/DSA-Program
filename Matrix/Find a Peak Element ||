A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 Example 1:
Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.
Example 2:

Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.

Solution:

class Solution {
    public int[] findPeakGrid(int[][] mat) {
        int startRow=0;
        int endRow=mat.length-1;
     while(startRow<=endRow){
            int midleRow=(startRow+endRow)/2;
            int rowMax=maxRowElementPos(mat[midleRow],mat[0].length-1);

        if(midleRow==0){
            if(mat[midleRow][rowMax]>mat[midleRow+1][rowMax]){
                return new int[]{midleRow,rowMax};
            }
        }else if(midleRow==mat.length-1){
            if(mat[midleRow][rowMax]>mat[midleRow-1][rowMax]){
                return new int[]{midleRow,rowMax};
            }
        }
        if(mat[midleRow][rowMax]>mat[midleRow+1][rowMax] &&mat[midleRow][rowMax]>mat[midleRow-1][rowMax]){
              return new int[]{midleRow,rowMax};
    }else if(mat[midleRow][rowMax]<mat[midleRow+1][rowMax]){
        startRow=midleRow+1;
    }else{
        endRow=midleRow-1;
    }

}
    return new int[]{-1,-1};
}
    private int maxRowElementPos(int arr[],int end){
        int max=0;
        int index=0;
        for(int i=0;i<=end;i++){
            if(arr[i]>max){
                max=arr[i];
                index=i;
            }

        }
        return index;
    } 
}

