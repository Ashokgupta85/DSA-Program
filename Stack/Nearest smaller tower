Given an array where each element (arr[i]) represents the height of the tower. Find for each tower, the nearest possible tower that is shorter than it. You can look left or right on both sides.
Note : 

If two smaller towers are at the same distance, pick the smallest tower.

If two towers have the same height then we choose the one with a smaller index.

Example 1:

Input: 
arr[] = {1,3,2}
Output: 
{-1,0,0}
Explanation:
For 0th Index : no tower is smallest, so -1.
For 1st Index : For 3, here 1 & 2 both are 
small & at a same distance, so we will pick 1, 
beacuse it has smallest value, so 0(Index)
For 2nd Index : here 1 is smaller, so 0(Index)
So the final output will be which consistes 
Indexes are {-1,0,0}.
Example 2:

Input: 
arr[] = {4,8,3,5,3}
Output: 
{2,2,-1,2,-1}

Explanation: 
For 0th Index : here 3 is the smaller, so 2(Index) 
For 1st Index : For 8, here 4 & 3 both are
small & at a same distance, so we will pick 3, so 2(Index)
For 2nd Index : no tower is smallest, so -1.
For 3rd Index : For 5, here 3 & 3 both are
small & at a same distance, so we will pick 
3(2nd Index) because it smaller Index, so 2(Index)
For 4th Index : no tower is smallest, so -1.
So the final output will be which consistes
Indexes are {2,2,-1,2,-1}.

Solution :


class Solution{
	int [] nearestSmallestTower(int [] arr){

		Stack<Integer>st=new Stack<>();
		int LeftS[]=new int [arr.length];
		int RightS[]=new int[arr.length];
		Arrays.fill(LeftS, -1);      // Initialize all elements of the 'left' array to -1
        Arrays.fill(RightS, -1);     // Initialize all elements of the 'right' array to -1
		
		for(int i=arr.length-1;i>=0;i--){
		    while(st.size()>0 && arr[st.peek()]>=arr[i]){
		        st.pop();
		    }
		    
		  if(st.size()>0){
		        RightS[i]=st.peek();
		    }
		     st.push(i);
		}
		st=new Stack<>();
	 

	  	for(int i=0;i<arr.length;i++){
		    while(st.size()>0 && arr[st.peek()]>=arr[i]){
		        st.pop();
		    }
		    
		   if(st.size()>0){
		        LeftS[i]=st.peek();
		    }
		     st.push(i);
		}
		
		int[] result = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
             // Distance between the current tower and the nearest smaller tower on the left
            int leftDist = LeftS[i] == -1 ? Integer.MAX_VALUE : i - LeftS[i]; 
            // Distance between the current tower and the nearest smaller tower on the right
            int rightDist = RightS[i] == -1 ? Integer.MAX_VALUE : RightS[i] - i;    
            /* If the nearest smaller tower on the left is closer or has equal distance but is 
            smaller or equal in height, set it as the result*/
            if (leftDist < rightDist || (leftDist == rightDist && LeftS[i] != -1 && arr[LeftS[i]] <= arr[RightS[i]])) {
                result[i] = LeftS[i];    
            } else 
            /* If the nearest smaller tower on the right is closer or has equal distance but is 
            smaller in height, set it as the result*/
            
            if (leftDist > rightDist || (leftDist == rightDist && RightS[i] != -1 && arr[RightS[i]] < arr[LeftS[i]])) {
                result[i] = RightS[i];   
            } else {
                result[i] = -1; // If there is no smaller tower on both sides, set the result as -1
            }
        }
        return result;  // Return the final result array
	
	  
	}
}
