Given a stack, the task is to sort it such that the top of the stack has the greatest element.

Example 1:

Input
Stack: 3 2 1
Output: 3 2 1
Example 2:

Input:
Stack: 11 2 32 3 41
Output: 41 32 11 3 2

//Solution
//using recursion

*Complete the function below*/
class GfG{
	public Stack<Integer> sort(Stack<Integer> s)
	{
		//add code here.
    //Base case
		if(s.isEmpty()){
		    return s;
		}
		int num=s.peek();
		s.pop();
		sort(s);//recursive call
		SortedInsert(s,num);
		return s;
		
	}
	public void SortedInsert(Stack<Integer> st,int elem){
	     //Base case
       if(st.isEmpty() || st.peek()<elem){
	         st.push(elem);
	         return;
	         
	     }
	     int num=st.pop();
	     SortedInsert(st,elem);//recursive call
	     st.push(num);
	}
}
