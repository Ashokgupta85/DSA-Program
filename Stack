Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false

//Solution

import java.util.Stack;
class Solution {
    public boolean isValid(String s) {
      Stack<Character> str=new Stack<>();
        for(int i=0;i<s.length();i++){
     if(s.charAt(i)=='(' ||s.charAt(i)=='{' || s.charAt(i)=='[' ){
          str.push(s.charAt(i));
     }
     else if(s.charAt(i)==')' || s.charAt(i)=='}' || s.charAt(i)==']'){
         if(str.isEmpty()){
             return false;
         }
         char topChr=str.pop();
         
         if(s.charAt(i)==')' && topChr=='('){
             continue;
         }else if(s.charAt(i)=='}' && topChr=='{'){
             continue;
         }
         else if(s.charAt(i)==']' && topChr=='['){
             continue;
         }
         else{
             return false;
         }
         }
        }
        return str.isEmpty();
        }
}
