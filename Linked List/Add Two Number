Input: 
L1 = 5 -> 6 -> 3 -> NULL 
L2 = 8 -> 4 -> 2 -> NULL 
Output: 1 -> 4 -> 0 -> 5 -> NULL

Input: 
L1 = 1 -> 0 -> 0 -> NULL 
L2 = 9 -> 1 -> NULL 
Output: 1 -> 9 -> 1 -> NULL 


//Solution

class Solution{
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        // code here
        // return head of sum list
      Node curr=first;
      Node frwd=null;
      Node prev=null;
      while(curr!=null){
          frwd=curr.next;
          curr.next=prev;
          prev=curr;
          curr=frwd;
      }
      Node head1=prev;
      curr=second;
       frwd=null;
      prev=null;
      while(curr!=null){
          frwd=curr.next;
          curr.next=prev;
          prev=curr;
          curr=frwd;
      }
      Node head2=prev;
      Node head=new Node(0);
      Node temp=head;
      int sum=0;
      int carry=0;
      while(head1!=null || head2!=null || carry!=0){
          sum=0;
          if(head1!=null){
              sum=sum+head1.data;
              head1=head1.next;
          }
          if(head2!=null){
              sum=sum+head2.data;
              head2=head2.next;
          }
          sum=sum+carry;
          carry=sum/10;
          Node node=new Node(sum%10);
          temp.next=node;
          temp=temp.next;
          }
      curr=head.next;
      prev=null;
      frwd=null;
       while(curr!=null){
          frwd=curr.next;
          curr.next=prev;
          prev=curr;
          curr=frwd;
      }
      return prev;
      
    }
}
